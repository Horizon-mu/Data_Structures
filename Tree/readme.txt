··树（非线性的，一对多）

树的存储结构
··1.双亲表示法
    树中的结点除了根节点外，都有且只有一个双亲结点， 可以在使用数组存储树中的每个
    结点，数组的下标就是数组的位置指针，每个节点再增加一个指向双亲结点的指针域；
··2.孩子表示法
    树中 每个节点可能有多个子树，可以考虑使用多重链表，每个节点可以有多个指针域，每个指针域值向他的子树的根节点
  把这种方法称为多重链表表示法
    树的每个节点的度可能不一样，即每个结点的孩子个数可能不相等，一般设计以下两种方案：
        方案一：结点中指针域的个数就是树的度
                如果树中各个结点的度相差很大时，有许多指针域是空的，非常浪费存储空间。这种
                表示方法适合各个结点度相差很小的情况
        方案二：每个结点的指针域的个数等于该节点的度。在结点中专门定义一个存储该结点度的域。
                该方法提高了空间利用率，但是各个节点的结构可能不一样，还要维护节点的度的值
             会增加时间上的损耗。
    孩子表示法 通常是把每个节点的孩子结点排列起来，构成一个单链表，称为孩子链表。n个结点共有n个孩子链表（叶子节点的
        孩子链表为空表），而n个结点的数据和n个孩子链表的头指针又组成一个顺序表。
        在这种表示方法中，需要设计两种结点，一个结点表数组中表头结点，包括数据域和指向第一个孩子的指针域；还需要设计
        一个孩子结点，存储孩子结点在数组中的下标和指向下一个孩子的指针。
    在这种结构中，可以方便查找某个节点的孩子，也可以方便的查找某个结点的兄弟。 如果需要查找结点的父节点，需要遍历整棵
    树。可以在结点表（顺序表）中增加一个指向父结点的指针域，这种表示法称为~双亲孩子表示法。
··3.孩子兄弟表示法
    这种表示方法又称为树的二叉表示法，或者二叉链表表示法，即以二叉链表作为树的存储结构。链表中设有两个链域分别指向
    该结点的第一个孩子结点和下一个兄弟（有兄弟）结点。


··二叉树的存储结构
    1）顺序存储：
        使用一维数组存储二叉树中的结点，结点的存储位置（数组的下标）可以反映结点之间的逻辑关系
        对于一个深度为k的二叉树，在最坏情况下（每个结点只有右孩子）需要占用2的k次方-1个存储单元，
        空间浪费太大
    2）链式存储：
        二叉树结点：每个结点至少包含三个域，数据域、左孩子域和右孩子域。
        为了方便找到父结点，可以在结点上增加一个指向父结点的指针域，这种结点组成的链表称为三叉链表。
··二叉树的遍历
    二叉树的遍历就是从根节点出发，按照某种次序依次访问二叉树中所有的结点，使得每个结点有且仅有被访问一次

    前序遍历：
        根左右
    中序遍历：
        左根右
    后序遍历：
        左右根
    层序遍历：
        从树的第一层，即从根节点开始，从上到下，从左到右的顺序逐个访问
